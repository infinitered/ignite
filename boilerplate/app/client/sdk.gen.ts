// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-fetch';
import type {
  ItemsControllerFindAllData,
  ItemsControllerFindAllResponse,
  ItemsControllerCreateData,
  ItemsControllerCreateResponse,
  ItemsControllerDeleteData,
  ItemsControllerDeleteResponse,
  HeartbeatControllerHeartbeatData,
  HeartbeatControllerHeartbeatResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const itemsControllerFindAll = <ThrowOnError extends boolean = false>(
  options: Options<ItemsControllerFindAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ItemsControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/items',
    ...options,
  });
};

export const itemsControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<ItemsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ItemsControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const itemsControllerDelete = <ThrowOnError extends boolean = false>(
  options: Options<ItemsControllerDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ItemsControllerDeleteResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/items/{id}',
    ...options,
  });
};

/**
 * Check if the service is up and running
 */
export const heartbeatControllerHeartbeat = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<HeartbeatControllerHeartbeatData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HeartbeatControllerHeartbeatResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/heartbeat',
    ...options,
  });
};
